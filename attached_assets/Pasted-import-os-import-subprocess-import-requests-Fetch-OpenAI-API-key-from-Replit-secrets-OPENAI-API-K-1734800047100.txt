import os
import subprocess
import requests

# Fetch OpenAI API key from Replit secrets
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
API_URL = "https://api.openai.com/v1/chat/completions"

# Supported file extensions
SUPPORTED_LANGUAGES = {
    ".js": "JavaScript",
    ".py": "Python"
}

def detect_language(file_path):
    """
    Detects the language of the file based on its extension.
    """
    _, ext = os.path.splitext(file_path)
    return SUPPORTED_LANGUAGES.get(ext, None)

def fix_code_with_codex(file_path, language):
    """
    Sends the code to OpenAI Codex for fixing and returns the fixed code.
    """
    with open(file_path, "r") as file:
        code_snippet = file.read()

    prompt = f"""
    You are a coding assistant. Review the following {language} code. Identify and fix any issues, 
    including errors, inefficiencies, or integration problems that could hinder full deployment. 
    Ensure the code is compatible with other components and optimized for production:

    {code_snippet}
    """

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-4",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.5
    }

    response = requests.post(API_URL, headers=headers, json=data)
    if response.status_code == 200:
        fixed_code = response.json()["choices"][0]["message"]["content"]
        return fixed_code
    else:
        print(f"Error with OpenAI API: {response.status_code} - {response.text}")
        return None

def apply_linters(file_path, language):
    """
    Applies language-specific linters (Flake8/Black for Python, ESLint/Prettier for JavaScript).
    """
    if language == "Python":
        print(f"\nApplying Flake8 and Black to {file_path}...")
        subprocess.run(["flake8", file_path])
        subprocess.run(["black", file_path])
    elif language == "JavaScript":
        print(f"\nApplying ESLint and Prettier to {file_path}...")
        subprocess.run(["npx", "eslint", "--fix", file_path])
        subprocess.run(["npx", "prettier", "--write", file_path])
    else:
        print(f"Skipping linting: Unsupported language for {file_path}.")

def save_fixed_code(file_path, fixed_code):
    """
    Saves the fixed code to the original file.
    """
    with open(file_path, "w") as file:
        file.write(fixed_code)
    print(f"Fixed code has been saved to {file_path}.")

def process_directory(directory):
    """
    Recursively processes all supported files in the project directory.
    """
    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            language = detect_language(file_path)
            if language:
                print(f"\nProcessing {file_path} ({language})...")
                
                # Step 1: Fix the code with Codex
                fixed_code = fix_code_with_codex(file_path, language)
                if fixed_code:
                    save_fixed_code(file_path, fixed_code)

                    # Step 2: Apply linters
                    apply_linters(file_path, language)
                else:
                    print(f"Failed to process {file_path}. Skipping.")

def test_integration(directory):
    """
    Runs tests or integration scripts to validate the project.
    """
    print("\nRunning integration tests...")
    try:
        result = subprocess.run(["pytest", directory], capture_output=True, text=True)
        print("\nTest Results:\n")
        print(result.stdout)
        if result.returncode == 0:
            print("Integration tests passed successfully!")
        else:
            print("Integration tests failed. Check the logs above.")
    except FileNotFoundError:
        print("No tests found or pytest not installed. Skipping tests.")

def deploy_project():
    """
    Deploys the project. Customize this function for your deployment process.
    """
    print("\nStarting deployment process...")
    try:
        # Example deployment step: Run a Docker container
        result = subprocess.run(["docker", "build", "-t", "project-deployment", "."], capture_output=True, text=True)
        print("\nDeployment Output:\n")
        print(result.stdout)
        if result.returncode == 0:
            print("Deployment completed successfully!")
        else:
            print("Deployment failed. Check the error logs above.")
    except Exception as e:
        print(f"An error occurred during deployment: {e}")

if __name__ == "__main__":
    # Specify the project directory
    project_directory = input("Enter the project directory path: ").strip()

    # Step 1: Process all files in the directory
    process_directory(project_directory)

    # Step 2: Test integration (if applicable)
    test_integration(project_directory)

    # Step 3: Deploy the project
    deploy_project()
