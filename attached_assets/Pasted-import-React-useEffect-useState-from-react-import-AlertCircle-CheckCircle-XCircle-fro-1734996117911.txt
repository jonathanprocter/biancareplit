import React, { useEffect, useState } from 'react';
import { AlertCircle, CheckCircle, XCircle } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

interface SystemStatus {
  status: 'ok' | 'error';
  checks: {
    database: boolean;
    api: boolean;
    static: boolean;
    env: boolean;
  };
  details: {
    missingEnvVars?: string[];
    databaseError?: string;
    apiErrors?: string[];
  };
}

const SystemCheck = () => {
  const [status, setStatus] = useState<SystemStatus | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const checkSystem = async () => {
      try {
        const response = await fetch('/api/system-check');
        const data = await response.json();
        setStatus(data);
      } catch (error) {
        console.error('System check failed:', error);
      } finally {
        setLoading(false);
      }
    };

    checkSystem();
  }, []);

  if (loading) {
    return (
      <Alert className="max-w-xl">
        <AlertTitle className="flex items-center">
          Checking system status...
        </AlertTitle>
      </Alert>
    );
  }

  if (!status) {
    return (
      <Alert variant="destructive" className="max-w-xl">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error</AlertTitle>
        <AlertDescription>
          Failed to fetch system status
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-4 max-w-xl">
      <Alert variant={status.status === 'ok' ? 'default' : 'destructive'}>
        <AlertTitle className="flex items-center">
          {status.status === 'ok' ? (
            <CheckCircle className="h-4 w-4 mr-2" />
          ) : (
            <XCircle className="h-4 w-4 mr-2" />
          )}
          System Status: {status.status.toUpperCase()}
        </AlertTitle>
      </Alert>
      
      {Object.entries(status.checks).map(([key, value]) => (
        <Alert key={key} variant={value ? 'default' : 'destructive'}>
          <AlertTitle className="flex items-center">
            {value ? (
              <CheckCircle className="h-4 w-4 mr-2" />
            ) : (
              <XCircle className="h-4 w-4 mr-2" />
            )}
            {key.charAt(0).toUpperCase() + key.slice(1)}
          </AlertTitle>
          {!value && status.details[`${key}Error`] && (
            <AlertDescription>
              {status.details[`${key}Error`]}
            </AlertDescription>
          )}
        </Alert>
      ))}
    </div>
  );
};

export default SystemCheck;