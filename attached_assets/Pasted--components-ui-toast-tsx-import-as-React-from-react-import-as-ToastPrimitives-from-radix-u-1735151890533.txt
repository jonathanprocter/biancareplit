// components/ui/toast.tsx
import * as React from 'react'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { X } from 'lucide-react'
import { cn } from '@/lib/utils'

interface ToastProps {
  title?: React.ReactNode
  description?: React.ReactNode
  action?: React.ReactNode
}

const ToastContext = React.createContext<{
  toasts: ToastProps[]
  addToast: (toast: ToastProps) => void
  removeToast: (index: number) => void
}>({
  toasts: [],
  addToast: () => {},
  removeToast: () => {},
})

export function ToastProvider({ children }: { children: React.ReactNode }) {
  const [toasts, setToasts] = React.useState<ToastProps[]>([])

  const addToast = React.useCallback((toast: ToastProps) => {
    setToasts((prev) => [...prev, toast])
  }, [])

  const removeToast = React.useCallback((index: number) => {
    setToasts((prev) => prev.filter((_, i) => i !== index))
  }, [])

  return (
    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>
      <ToastPrimitives.Provider>
        {children}
        <ToastPrimitives.Viewport className="fixed bottom-0 right-0 z-50 flex flex-col p-4 gap-2 w-full sm:max-w-[420px]" />
      </ToastPrimitives.Provider>
    </ToastContext.Provider>
  )
}

export function useToast() {
  const context = React.useContext(ToastContext)
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider')
  }
  return context
}

export const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root>
>(({ className, children, ...props }, ref) => (
  <ToastPrimitives.Root
    ref={ref}
    className={cn(
      'bg-white rounded-lg shadow-lg p-4 relative flex items-center justify-between',
      className
    )}
    {...props}
  >
    {children}
    <ToastPrimitives.Close className="absolute right-2 top-2 opacity-0 group-hover:opacity-100">
      <X className="h-4 w-4" />
    </ToastPrimitives.Close>
  </ToastPrimitives.Root>
))
Toast.displayName = 'Toast'

export const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold', className)}
    {...props}
  />
))
ToastTitle.displayName = 'ToastTitle'

export const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm text-gray-500', className)}
    {...props}
  />
))
ToastDescription.displayName = 'ToastDescription'