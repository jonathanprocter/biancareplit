import requests
import os
import subprocess

# Fetch Claude API key from Replit secrets
CLAUDE_API_KEY = os.getenv("CLAUDE_API_KEY")
API_URL = "https://api.anthropic.com/v1/complete"

def fix_code_with_claude(file_path, max_tokens=1000):
    """
    Reads code from a file, sends it to Claude for fixing, and saves the fixed code.
    """
    # Read the code from the file
    with open(file_path, "r") as file:
        code_snippet = file.read()

    # Define the prompt for Claude
    prompt = f"""
    You are a skilled programmer. Please review, fix, and optimize the following code for deployment:
    
    ```python
    {code_snippet}
    ```

    Return the corrected code ready for production deployment.
    """

    headers = {
        "x-api-key": CLAUDE_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "model": "claude-1.3",  # Use the Claude version you're targeting
        "prompt": prompt,
        "max_tokens_to_sample": max_tokens
    }

    try:
        # Send the request to Claude
        response = requests.post(API_URL, headers=headers, json=data)
        if response.status_code == 200:
            fixed_code = response.json()["completion"]
            # Save the fixed code to a new file
            fixed_file_path = file_path.replace(".py", "_fixed.py")
            with open(fixed_file_path, "w") as fixed_file:
                fixed_file.write(fixed_code)
            print(f"\nThe fixed code has been saved to: {fixed_file_path}")
            return fixed_file_path
        else:
            print(f"Error: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

def deploy_code(file_path):
    """
    Deploys the fixed code. Modify this function to match your deployment process.
    """
    try:
        # Example: Use subprocess to deploy (customize based on your process)
        print("\nStarting deployment process...")
        result = subprocess.run(["python3", file_path], capture_output=True, text=True)
        print("\nDeployment Output:\n")
        print(result.stdout)
        if result.returncode == 0:
            print("Deployment completed successfully!")
        else:
            print("Deployment failed. Check the error logs above.")
    except Exception as e:
        print(f"An error occurred during deployment: {e}")

if __name__ == "__main__":
    # Specify the file to review and fix
    input_file = "faulty_code.py"  # Replace with your actual file name

    # Step 1: Review and Fix the Code
    fixed_file = fix_code_with_claude(input_file)

    # Step 2: Deploy the Fixed Code
    if fixed_file:
        deploy_code(fixed_file)
