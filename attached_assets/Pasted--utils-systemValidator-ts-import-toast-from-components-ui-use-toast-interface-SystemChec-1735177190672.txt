// utils/systemValidator.ts
import { toast } from '@/components/ui/use-toast';

interface SystemCheck {
  name: string;
  check: () => Promise<boolean>;
  critical: boolean;
}

interface ValidationResult {
  success: boolean;
  failedChecks: string[];
  warnings: string[];
}

export class SystemValidator {
  private static instance: SystemValidator;
  private checkRegistry: SystemCheck[] = [];

  private constructor() {
    this.initializeChecks();
  }

  static getInstance(): SystemValidator {
    if (!SystemValidator.instance) {
      SystemValidator.instance = new SystemValidator();
    }
    return SystemValidator.instance;
  }

  private initializeChecks() {
    // Component Availability Checks
    this.registerCheck({
      name: 'Toast Component',
      check: async () => {
        try {
          return typeof toast === 'function';
        } catch {
          return false;
        }
      },
      critical: true
    });

    // Data Layer Checks
    this.registerCheck({
      name: 'LocalStorage Access',
      check: async () => {
        try {
          localStorage.setItem('test', 'test');
          localStorage.removeItem('test');
          return true;
        } catch {
          return false;
        }
      },
      critical: true
    });

    // API Integration Checks
    this.registerCheck({
      name: 'API Connectivity',
      check: async () => {
        try {
          const response = await fetch('/api/health');
          return response.status === 200;
        } catch {
          return false;
        }
      },
      critical: true
    });
  }

  registerCheck(check: SystemCheck) {
    this.checkRegistry.push(check);
  }

  async validateSystem(): Promise<ValidationResult> {
    const failedChecks: string[] = [];
    const warnings: string[] = [];

    for (const check of this.checkRegistry) {
      try {
        const passed = await check.check();
        if (!passed) {
          if (check.critical) {
            failedChecks.push(check.name);
          } else {
            warnings.push(check.name);
          }
        }
      } catch (error) {
        if (check.critical) {
          failedChecks.push(check.name);
        } else {
          warnings.push(check.name);
        }
      }
    }

    return {
      success: failedChecks.length === 0,
      failedChecks,
      warnings
    };
  }
}

// Integration monitor component
import React, { useEffect, useState } from 'react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

export const IntegrationMonitor: React.FC = () => {
  const [status, setStatus] = useState<ValidationResult | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const validator = SystemValidator.getInstance();
    
    const checkSystem = async () => {
      try {
        const result = await validator.validateSystem();
        setStatus(result);
      } catch (error) {
        console.error('Validation failed:', error);
      } finally {
        setLoading(false);
      }
    };

    void checkSystem();
    
    // Periodic checks
    const interval = setInterval(checkSystem, 5 * 60 * 1000); // Every 5 minutes
    
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return <div>Checking system status...</div>;
  }

  if (!status) {
    return <div>Unable to determine system status</div>;
  }

  return (
    <div className="space-y-4">
      {!status.success && (
        <Alert variant="destructive">
          <AlertTitle>System Issues Detected</AlertTitle>
          <AlertDescription>
            <ul className="list-disc pl-4">
              {status.failedChecks.map((check) => (
                <li key={check}>{check} check failed</li>
              ))}
            </ul>
          </AlertDescription>
        </Alert>
      )}
      
      {status.warnings.length > 0 && (
        <Alert variant="warning">
          <AlertTitle>System Warnings</AlertTitle>
          <AlertDescription>
            <ul className="list-disc pl-4">
              {status.warnings.map((warning) => (
                <li key={warning}>{warning} warning</li>
              ))}
            </ul>
          </AlertDescription>
        </Alert>
      )}
      
      {status.success && status.warnings.length === 0 && (
        <Alert variant="success">
          <AlertTitle>All Systems Operational</AlertTitle>
          <AlertDescription>
            All integration checks passed successfully.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
};