// lib/codeReview.ts
interface CodeIssue {
  file: string;
  line: number;
  column: number;
  message: string;
  severity: 'error' | 'warning';
}

interface ReviewResult {
  issues: CodeIssue[];
  stats: {
    filesChecked: number;
    errorCount: number;
    warningCount: number;
  };
}

export class CodeReview {
  private currentResult: ReviewResult = {
    issues: [],
    stats: {
      filesChecked: 0,
      errorCount: 0,
      warningCount: 0
    }
  };

  async reviewFile(filePath: string): Promise<CodeIssue[]> {
    try {
      const response = await fetch('/api/review-file', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ path: filePath }),
      });

      if (!response.ok) {
        throw new Error(`File review failed: ${response.statusText}`);
      }

      const issues: CodeIssue[] = await response.json();
      this.currentResult.stats.filesChecked++;
      this.currentResult.stats.errorCount += issues.filter(i => i.severity === 'error').length;
      this.currentResult.stats.warningCount += issues.filter(i => i.severity === 'warning').length;
      
      return issues;
    } catch (error) {
      console.error(`Error reviewing file ${filePath}:`, error);
      throw error;
    }
  }

  async getReviewStatus(): Promise<ReviewResult> {
    return this.currentResult;
  }

  async clearReview(): Promise<void> {
    this.currentResult = {
      issues: [],
      stats: {
        filesChecked: 0,
        errorCount: 0,
        warningCount: 0
      }
    };
  }
}

// pages/api/review-file.ts
import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { path } = req.body;

    if (!path) {
      return res.status(400).json({ error: 'File path is required' });
    }

    // Implement your file review logic here
    // For now, return an empty array of issues
    res.status(200).json([]);
  } catch (error) {
    console.error('File review error:', error);
    res.status(500).json({ 
      error: 'File review failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}