#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper function for printing status
print_status() {
  echo "${BLUE}[$(date +%T)]${NC} $1"
}

# Error handler
handle_error() {
  echo "${RED}‚ùå $1${NC}"
  exit 1
}

print_status "üîç Starting pre-commit checks..."

# Check for unstaged changes
if ! git diff --quiet; then
  print_status "${YELLOW}‚ö†Ô∏è  Warning: You have unstaged changes${NC}"
  print_status "${YELLOW}üí° Tip: Stage or stash them to ensure clean commits${NC}"
fi

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E '\.(js|jsx|ts|tsx|json|css|scss|md)$' || true)

if [ -n "$STAGED_FILES" ]; then
  print_status "üé® Running Prettier on staged files..."
  
  # Format files with Prettier
  if ! npx prettier --write $STAGED_FILES --ignore-unknown; then
    handle_error "Prettier formatting failed"
  fi
  
  # Add formatted files back to staging
  git add $STAGED_FILES
  print_status "${GREEN}‚úì Files formatted successfully${NC}"
else
  print_status "${YELLOW}‚ÑπÔ∏è No files to format${NC}"
fi

# TypeScript checks
if echo "$STAGED_FILES" | grep -qE '\.tsx?$'; then
  print_status "üîç Running TypeScript checks..."
  
  if ! npx tsc --noEmit --skipLibCheck; then
    handle_error "TypeScript check failed"
  fi
  print_status "${GREEN}‚úì TypeScript checks passed${NC}"
fi

print_status "${GREEN}‚úÖ All checks completed successfully!${NC}"